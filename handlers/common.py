from aiogram import Router, F
from aiogram.types import Message, WebAppInfo, PreCheckoutQuery, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime
import httpx

from config_reader import config, user_subscriptions
from data.festival_schedule import get_current_performance, FESTIVAL_PROGRAM

router = Router()
markup = (
    InlineKeyboardBuilder()
    .button(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å", web_app=WebAppInfo(url=config.WEBAPP_URL))
).as_markup()

@router.message(CommandStart())
async def start(message: Message) -> None:
    current_time_info = get_current_performance(datetime.now())
    schedule_text = (
        f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è:\n"
        f"{current_time_info}\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –∏ —è –æ—Ç–≤–µ—á—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å–º–æ–≥—É!"
    )
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        f"{schedule_text}",
        reply_markup=markup
    )
    
@router.pre_checkout_query()
async def precheck(event: PreCheckoutQuery) -> None:
    await event.answer(True)

# –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
@router.message(Command('unsubscribe'))
async def unsubscribe_command(message: Message) -> None:
    user_id = message.from_user.id
    if user_id in user_subscriptions and user_subscriptions[user_id]:
        builder = InlineKeyboardBuilder()
        for i, (group_name, _) in enumerate(user_subscriptions[user_id]):
            builder.button(text=f"–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç {group_name}", callback_data=f"unsubscribe_confirm_{i}")
        builder.adjust(1)
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –æ—Ç –∫–æ—Ç–æ—Ä–æ–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è:",
            reply_markup=builder.as_markup()
        )
    else:
        await message.answer("–í—ã –µ—â–µ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∏ –Ω–∞ –æ–¥–Ω—É –≥—Ä—É–ø–ø—É.")

@router.callback_query(F.data.startswith('unsubscribe_confirm_'))
async def process_unsubscribe_confirm_callback(callback_query: CallbackQuery) -> None:
    user_id = callback_query.from_user.id
    try:
        sub_index = int(callback_query.data.split('_')[-1])
        if user_id in user_subscriptions and len(user_subscriptions[user_id]) > sub_index:
            group_name, _ = user_subscriptions[user_id].pop(sub_index)
            message_text = f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –≥—Ä—É–ø–ø—ã: {group_name}."
            await callback_query.answer(message_text, show_alert=True)
        else:
            message_text = "–û—à–∏–±–∫–∞: –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."
            await callback_query.answer(message_text, show_alert=True)
    except (ValueError, IndexError):
        message_text = "–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏."
        await callback_query.answer(message_text, show_alert=True)
    
    await callback_query.message.edit_text(message_text, reply_markup=None) # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

@router.message(F.successful_payment)
async def successful_payment(message: Message) -> None:
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!!!")

@router.message(Command('track'))
async def track_command(message: Message) -> None:
    builder = InlineKeyboardBuilder()
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    group_names = sorted(list(set(event['description'] for event in FESTIVAL_PROGRAM)))
    for i, group_name in enumerate(group_names):
        builder.button(text=group_name, callback_data=f"select_group_{group_name}") # –ò–∑–º–µ–Ω–∏–ª callback_data
    builder.adjust(2) # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith('select_group_'))
async def process_select_group_callback(callback_query: CallbackQuery) -> None:
    group_name = callback_query.data.split('select_group_')[1]
    user_id = callback_query.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –Ω–∞ —ç—Ç—É –≥—Ä—É–ø–ø—É
    if user_id in user_subscriptions and any(sub[0] == group_name for sub in user_subscriptions[user_id]):
        message_text = f"–í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ {group_name}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /unsubscribe –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏."
        await callback_query.answer(message_text, show_alert=True)
        await callback_query.message.edit_text(message_text, reply_markup=None)
        return

    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∏–Ω—Ç–µ—Ä–≤–∞–ª
    interval_options = [10, 15, 20, 25, 30, 60] # –ú–∏–Ω—É—Ç—ã
    builder = InlineKeyboardBuilder()
    for interval in interval_options:
        builder.button(text=f"{interval} –º–∏–Ω", callback_data=f"set_interval_{group_name}_{interval}")
    builder.adjust(3)
    await callback_query.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É: {group_name}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith('set_interval_'))
async def process_set_interval_callback(callback_query: CallbackQuery) -> None:
    parts = callback_query.data.split('_')
    group_name = parts[2]
    interval_minutes = int(parts[3])
    user_id = callback_query.from_user.id

    if user_id not in user_subscriptions:
        user_subscriptions[user_id] = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
    user_subscriptions[user_id].append((group_name, interval_minutes))

    message_text = f"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ {group_name} –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –∫–∞–∂–¥—ã–µ {interval_minutes} –º–∏–Ω—É—Ç!"
    await callback_query.answer(message_text, show_alert=True)
    await callback_query.message.edit_text(message_text, reply_markup=None) # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É