from aiogram import Router, F
from aiogram.types import Message, WebAppInfo, PreCheckoutQuery, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime
import httpx

from config_reader import config
from data.festival_schedule import get_current_performance, FESTIVAL_PROGRAM

router = Router()
markup = (
    InlineKeyboardBuilder()
    .button(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å", web_app=WebAppInfo(url=config.WEBAPP_URL))
).as_markup()

@router.message(CommandStart())
async def start(message: Message) -> None:
    current_time_info = get_current_performance(datetime.now())
    schedule_text = (
        f"üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ñ–µ—Å—Ç–∏–≤–∞–ª—è:\n"
        f"{current_time_info}\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –ø–∏—à–∏—Ç–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è, –∏ —è –æ—Ç–≤–µ—á—É, –∫–∞–∫ —Ç–æ–ª—å–∫–æ —Å–º–æ–≥—É!"
    )
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        f"{schedule_text}",
        reply_markup=markup
    )
    
@router.pre_checkout_query()
async def precheck(event: PreCheckoutQuery) -> None:
    await event.answer(True)


@router.message(F.successful_payment)
async def successful_payment(message: Message) -> None:
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!!!")

@router.message(Command('track'))
async def track_command(message: Message) -> None:
    builder = InlineKeyboardBuilder()
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
    group_names = sorted(list(set(event['description'] for event in FESTIVAL_PROGRAM)))
    for i, group_name in enumerate(group_names):
        builder.button(text=group_name, callback_data=f"subscribe_{i}")
    builder.adjust(2) # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith('subscribe_'))
async def process_subscribe_callback(callback_query: CallbackQuery) -> None:
    # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø –≤ —Ç–æ–º –∂–µ –ø–æ—Ä—è–¥–∫–µ, —á—Ç–æ –∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫
    all_group_names = sorted(list(set(event['description'] for event in FESTIVAL_PROGRAM)))
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω–¥–µ–∫—Å –∏–∑ callback_data
    try:
        group_index = int(callback_query.data.split('_', 1)[1])
        group_name = all_group_names[group_index]
    except (ValueError, IndexError):
        await callback_query.answer("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏.", show_alert=True)
        return

    user_id = callback_query.from_user.id

    async with httpx.AsyncClient() as client:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞—à API –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
            response = await client.post(
                f"{config.SERVER_URL}/api/subscribe", # –ò—Å–ø–æ–ª—å–∑—É–µ–º config.SERVER_URL
                json={"group_name": group_name, "user_id": user_id}
            )
            response.raise_for_status() # –í—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è HTTP –æ—à–∏–±–æ–∫ (4xx –∏–ª–∏ 5xx)
            result = response.json()
            message_text = result.get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞.")
        except httpx.HTTPStatusError as e:
            message_text = f"–û—à–∏–±–∫–∞ HTTP –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ: {e.response.status_code} - {e.response.text}"
        except httpx.RequestError as e:
            message_text = f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ: {e}"
        except Exception as e:
            message_text = f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–ø–∏—Å–∫–µ: {e}"

    await callback_query.answer(message_text, show_alert=True)
    # –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –∏—Ö –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞
    await callback_query.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –≥—Ä—É–ø–ø—É: {group_name}.\n{message_text}",
        reply_markup=None # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )